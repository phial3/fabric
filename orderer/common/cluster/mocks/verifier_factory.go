// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	common "github.com/hyperledger/fabric-protos-go/common"
	mock "github.com/stretchr/testify/mock"

	protoutil "github.com/hyperledger/fabric/protoutil"
)

// VerifierFactory is an autogenerated mock type for the VerifierFactory type
type VerifierFactory struct {
	mock.Mock
}

// VerifierFromConfig provides a mock function with given fields: configuration, channel
func (_m *VerifierFactory) VerifierFromConfig(configuration *common.ConfigEnvelope, channel string) (protoutil.BlockVerifierFunc, error) {
	ret := _m.Called(configuration, channel)

	var r0 protoutil.BlockVerifierFunc
	if rf, ok := ret.Get(0).(func(*common.ConfigEnvelope, string) protoutil.BlockVerifierFunc); ok {
		r0 = rf(configuration, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoutil.BlockVerifierFunc)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*common.ConfigEnvelope, string) error); ok {
		r1 = rf(configuration, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVerifierFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewVerifierFactory creates a new instance of VerifierFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVerifierFactory(t mockConstructorTestingTNewVerifierFactory) *VerifierFactory {
	mock := &VerifierFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
